<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="store">

	<insert id="addStore" parameterType="s">
		insert into store
		values
		(store_seq.nextval,
		#{storeName},
		#{ownerNo},
		#{address},
		#{phone},
		#{content},
		#{openHour},
		#{closedDay},
		#{category},
		#{withEatCate},
		#{whereEatCate},
		#{maxNum}
		)
	</insert>

	<select id="selectStoreNo" resultType="_int">
		select max(store_no) as
		storeNo
		from store
	</select>

	<insert id="insertImg" parameterType="si">
		insert into store_img
		values
		(storeimg_seq.nextval,
		#{storeNo},
		#{imgpath}
		)
	</insert>

	<insert id="reviewWrite" parameterType="r">
		insert into review
		values
		(review_seq.nextval,
		#{storeNo},
		#{reserveNo},
		#{writer},
		#{rating},
		#{content},
		#{reviewImg},
		to_char(sysdate, 'yyyy-mm-dd')
		)
	</insert>

	<select id="storeList" parameterType="map" resultType="s">
		select *
		from
		(select row_number() over (order by rnum desc) as rnum1, rb.* from
		(select rownum as rnum, b.* from
		(select
		store_no as storeNo,
		store_name as storeName,
		owner_no as ownerNo,
		address,
		phone,
		content,
		open_hour as openHour,
		closed_day as closedDay,
		category,
		witheat_cate as
		withEatCate,
		whereeat_cate as whereEatCate,
		(select round(avg(rating),1) from review r where r.store_no = s.store_no)as rating, 
		(select imgpath from store_img si where storeimg_no = (select
		min(storeimg_no) from store_img si2 where si2.store_no = s.store_no))
		as thumbNail
		from store s order by storeNo desc)b)rb order by 3 desc)
		where rnum between
		#{start} and #{end}
	</select>


	<select id="storeTagList" parameterType="map" resultType="s">
		select
		* from
		(select row_number() over (order by rnum desc) as rnum1, rb.* from
		(select rownum as rnum, b.* from
		(select
		store_no as storeNo,
		store_name as storeName,
		owner_no as ownerNo,
		address,
		phone,
		content,
		open_hour as openHour,
		closed_day as closedDay,
		category,
		witheat_cate as
		withEatCate,
		whereeat_cate as whereEatCate,
		(select round(avg(rating),1) from review r where r.store_no = s.store_no)as rating,
		(select imgpath from store_img si where storeimg_no = (select
		min(storeimg_no) from store_img si2 where si2.store_no = s.store_no))
		as thumbNail
		from store s order by storeNo desc)b)rb order by 3 desc)
		where rnum between
		#{start} and #{end} and category = ${tagValue}
	</select>

	<select id="selectTag" parameterType="map" resultType="s">
		select *
		from
		(select row_number() over (order by rnum desc) as rnum1, rb.* from
		(select rownum as rnum, b.* from
		(select
		store_no as storeNo,
		store_name as storeName,
		owner_no as ownerNo,
		address,
		phone,
		content,
		open_hour as openHour,
		closed_day as closedDay,
		category,
		witheat_cate as
		withEatCate,
		whereeat_cate as whereEatCate,
		(select round(avg(rating),1) from review r where r.store_no = s.store_no)as rating,
		(select imgpath from store_img si where storeimg_no = (select
		min(storeimg_no) from store_img si2 where si2.store_no = s.store_no))
		as thumbNail from store s order by storeNo desc)b where category =
		#{category})rb order by 3 desc)
		where rnum between #{start} and #{end}
	</select>



	<select id="selectOneStoreAjax" parameterType="sj"
		resultType="sj">
		select
		store_no as storeNo,
		store_name as storeName,
		open_hour as openHour,
		address,
		phone,
		closed_day as closedDay,
		category,
		content,
		storeimg_no as storeImgNo,
		imgpath,
		max_num as maxNum
		from store
		join store_img using(store_no)
		where store_no = #{storeNo}
		ORDER BY
		storeimg_no asc
	</select>


	<select id="selectOneStore" parameterType="_int" resultType="s">
		select
		store_no as storeNo,
		store_name as storeName,
		open_hour as openHour,
		address,
		phone,
		closed_day as closedDay,
		category,
		content,
		max_num as maxNum,
        (SELECT ROUND(avg(RATING), 1) from REVIEW where STORE_NO = #{_parameter}) as rating       
		from store
		where store_no = #{_parameter}
	</select>



	<select id="countAllList" resultType="_int">
		select count(*) from store
	</select>

	<insert id="addMenu" parameterType="me">
		insert into menu values
		(menu_seq.nextval,
		#{storeNo},
		#{menuName},
		#{menuPrice},
		#{menuImg}
		)
	</insert>

	<select id="selectMyStore" parameterType="o" resultType="s">
		select
			a.store_no as storeNo,
			store_name as storeName,
			open_hour as openHour,
			address,
			phone,
			closed_day as closedDay,
			category,
			witheat_cate as withEatCate,
			whereeat_cate as whereEatCate,
			content,
			imgpath as storeImgList
		from store a
		left join store_img b
		on a.store_no =
		b.store_no
		where owner_no = #{ownerNo}
	</select>

  
	<select id="searchStore" parameterType="int" resultType="s">
		select 
			store_no as storeNo,
			store_name as storeName,
			owner_no as ownerNo,
			address,
			phone,
			content,
			open_hour as openHour,
			closed_day as closedDay,
			category,
			witheat_cate as withEatCate,
			whereeat_cate as whereEatCate
		from store 
		where owner_no = #{ownerNo}
	</select>
	
	<select id="countTagList" parameterType="string"
		resultType="_int">
		select count(*) from store where category = #{category}
	</select>

	<select id="searchStoreList" parameterType="map" resultType="s">
		select * from
		(select row_number() over (order by rnum desc) as rnum1, rb.* from
		(select rownum as rnum, b.* from
		(select
		store_no as storeNo,
		store_name as storeName,
		owner_no as ownerNo,
		address,
		phone,
		content,
		open_hour as openHour,
		closed_day as closedDay,
		category,
		witheat_cate as
		withEatCate,
		whereeat_cate as whereEatCate,
		(select round(avg(rating),1) from review r where r.store_no = s.store_no)as rating,
		(select imgpath from store_img si where storeimg_no = (select
		min(storeimg_no) from store_img si2 where si2.store_no = s.store_no))
		as thumbNail from store s order by storeNo desc)b
		<if test="category != null and category != ''">
			where category = #{category}
		</if>

		)rb order by 3 desc)
		where rnum between #{start} and #{end} and
		storeName like '%' || #{search} || '%'
	</select>


	<!-- 예약하기 -->
	<insert id="insertReserve" parameterType="r">
      insert into reserve
      values(RESERVE_SEQ.NEXTVAL, #{memberNo}, #{storeNo}, #{storeName}, to_char(sysdate,'yyyy-mm-dd'),
      #{eatDate}, #{eatTime}, #{eatNum})
    </insert>
    
    <!-- 예약한 건 확인 -->
    <select id="checkReserve" resultType="rs" parameterType="rs">
    	select
    		reserve_no as reserveNo,
    		member_no as memberNo,
    		store_no as storeNo,
    		store_name as storeName,
    		reserve_date as reserveDate,
    		eat_date as eatDate,
    		eat_time as eatTime,
    		eat_num as eatNum
    	from reserve
    	where store_no =  #{storeNo}
    </select>
    

    <select id="ajaxCheckReserveTime" resultType="rs" parameterType="map">
		SELECT
		    EAT_TIME as eatTime
		FROM RESERVE 
		WHERE STORE_NO=#{storeNo} AND EAT_DATE=#{selectDate}  
		GROUP BY EAT_TIME 
		HAVING SUM(EAT_NUM) >#{maxNum}
    </select>

	<select id="menuList" parameterType="int" resultType="me">
		select
		menu_no as menuNo,
		name as menuName,
		price as menuPrice,
		menu_img as menuImg
		from menu
		where store_no = #{storeNo}
		order by 1 DESC
	</select>

	<delete id="deleteMenu" parameterType="int">
		delete from menu
		where
		menu_No = #{menuNo}
	</delete>

	<select id="readOneMenu" parameterType="int" resultType="me">
		select
		menu_no as menuNo,
		name as menuName,
		price as menuPrice,
		menu_img as menuImg
		from menu
		where menu_No = #{menuNo}
	</select>

	<update id="updateMenu" parameterType="me">
		update menu
		set
		name =
		#{menuName},
		price = #{menuPrice},
		menu_img = #{menuImg}
		where menu_no =
		#{menuNo}
	</update>
	


	<select id="selectImg" parameterType="int" resultType="si">
		select
			storeimg_no as storeImgNo,
			store_no as storeNo,
			imgpath
		from store_img
		where store_no = #{storeNo}
	</select>

	<!-- 맛집 상세 > 메뉴 조회 -->
	<select id="selectMenuList" parameterType="int" resultType="me">
		select
			menu_no as menuNo,
			store_no as storeNo,
			name as menuName,
			price as menuPrice,
			menu_img as menuImg
		from menu
    	where store_no = #{storeNo}
    	order by menu_no DESC

	</select>

	<select id="sortStoreList" parameterType="map" resultType="s">
		select * from
		(select row_number() over (order by rnum desc) as rnum1, rb.* from
		(select rownum as rnum, b.* from
		(select
		store_no as storeNo,
		store_name as storeName,
		owner_no as ownerNo,
		address,
		phone,
		content,
		open_hour as openHour,
		closed_day as closedDay,
		category,
		witheat_cate as
		withEatCate,
		whereeat_cate as whereEatCate,
		(select round(avg(rating),1) from review r where r.store_no = s.store_no)as rating,
		(select imgpath from store_img si where storeimg_no = (select
		min(storeimg_no) from store_img si2 where si2.store_no = s.store_no))
		as thumbNail from store s order by storeNo desc)b
		<if test="category != null and category != ''">
			where category = #{category}
		</if>
		)rb order by  
		<choose>
			<when test="storeListSort.equals('new')">
				3 desc
			</when>
			<when test="storeListSort == old">
				3 asc
			</when>
			<when test="storeListSort.equals('grade')">
				14 asc
			</when>
		</choose>
		)
		where rnum between #{start} and #{end}
	</select>
	
	<!-- 리뷰리스트 -->
	<select id="selectReviewList" parameterType="int" resultType="r">
		select 
		review_no as reivewNo,
		writer,
		rating,
		content,
		review_img as reviewImg,
		enroll_date as enrollDate
		from review
		where store_no = #{_parameter}
	</select>

	<update id="updateStore" parameterType="s">
		update store
		set 
			store_name = #{storeName},
			address = #{address},
			phone = #{phone},
			content = #{content},
			open_hour = #{openHour},
			closed_day = #{closedDay},
			category = #{category},
			witheat_cate = #{withEatCate},
			whereeat_cate = #{whereEatCate}
			max_num = #{maxNum}
		where store_no = #{storeNo}
	</update>
	<delete id="deleteStoreImg" parameterType="int">
		delete from store_img
		where storeimg_no = #{imgNo}
	</delete>
	
	<select id="selectOneReivew" parameterType="int" resultType="r">
		select 
			review_no as reivewNo,
			writer,
			rating,
			content,
			review_img as reviewImg,
			enroll_date as enrollDate
			from review
			where reserve_no = #{_parameter}
	</select>
	
	<update id="updateReview" parameterType="r">
		update review set
		rating = #{rating},
		content = #{content},
		review_img = #{reviewImg}
		where review_no = #{reviewNo}
	</update>

</mapper>